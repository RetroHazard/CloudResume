name: Verify S3 Connection

defaults:
  run:
    working-directory: website

on: workflow_dispatch

permissions:
  id-token: write
  contents: read

jobs:
  check_infrastructure:
    name: Check Terraform Status
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check_tf_status.outputs.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check last Terraform run status
        id: check_tf_status
        run: |
          while :; do
            tf_status=$(gh run list --workflow="Terraform" --branch=main --limit=1 --json status,conclusion | jq -r '.[0].status + " " + (.[0].conclusion // "")')

            # Split the status and conclusion
            status=$(echo "$tf_status" | awk '{print $1}')
            conclusion=$(echo "$tf_status" | awk '{print $2}')

            echo "Current Terraform status: $status, conclusion: $conclusion"

            # If the workflow is completed, break out of the loop
            if [ "$status" = "completed" ]; then
              echo "Terraform run finished with conclusion: $conclusion"
              echo "status=$conclusion" >> $GITHUB_OUTPUT
              break
            fi

            # If the workflow is still running, wait for 30 seconds before checking again
            if [ "$status" = "in_progress" ] || [ "$status" = "queued" ]; then
              echo "Terraform workflow is still running. Waiting for completion..."
              sleep 30
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Upload to S3
    runs-on: ubuntu-latest
    needs: check_infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_TF_DEPLOYMENT_REGION }}
          role-to-assume: ${{ secrets.AWS_S3_OIDC_ROLE }}
          role-session-name: S3ConnectionTest

      - name: Upload to S3
        env:
          AWS_S3_BUCKET: ${{ needs.build_prod.outputs.status == 'true' && secrets.AWS_S3_BUCKET_PROD }}

        run: |
          echo "Testing Upload to S3" > testfile.txt
          aws s3 cp ./testfile.txt s3://${{ env.AWS_S3_BUCKET }}/