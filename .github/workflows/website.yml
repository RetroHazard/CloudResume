name: Deploy Website

defaults:
  run:
    working-directory: website

on:
  push:
    branches:
      - 'main'
    paths:
      - 'website/**'

jobs:
  check_infrastructure:
    name: Check Terraform Status
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check_tf_status.outputs.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check last Terraform run status
        id: check_tf_status
        run: |
          while :; do
            tf_status=$(gh run list --workflow="Terraform" --branch=main --limit=1 --json status,conclusion | jq -r '.[0].status + " " + (.[0].conclusion // "")')

            # Split the status and conclusion
            status=$(echo "$tf_status" | awk '{print $1}')
            conclusion=$(echo "$tf_status" | awk '{print $2}')

            echo "Current Terraform status: $status, conclusion: $conclusion"

            # If the workflow is completed, break out of the loop
            if [ "$status" = "completed" ]; then
              echo "Terraform run finished with conclusion: $conclusion"
              echo "status=$conclusion" >> $GITHUB_OUTPUT
              break
            fi

            # If the workflow is still running, wait for 30 seconds before checking again
            if [ "$status" = "in_progress" ] || [ "$status" = "queued" ]; then
              echo "Terraform workflow is still running. Waiting for completion..."
              sleep 30
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  setup:
    name: Setup Node
    runs-on: ubuntu-latest
    needs:
      - check_infrastructure

    if: ${{ needs.check_infrastructure.outputs.status == 'success' }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: cache node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: | 
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: install dependencies
        run: npm ci

  website_tests:
    name: Website Tests
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: restore node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: | 
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Run Tests on Website Components
        run: npm run test

  build_prod:
    name: Build Production Version
    runs-on: ubuntu-latest
    needs:
      - setup
      - website_tests
    outputs:
      status: ${{ steps.mark_prod_build_success.outputs.success }}

    if: ${{ needs.website_tests.result == 'success' }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: restore node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: | 
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: 'Create env file'
        run: |
          touch .env
          echo REACT_APP_RECAPTCHA_SITE_KEY=${{ secrets.RECAPTCHA_SITE_KEY }} >> .env
          echo REACT_APP_AWS_API_ENDPOINT=${{ secrets.AWS_API_ENDPOINT }} >> .env

      - name: Build Production Version
        run: npm run build-prod

      - name: Save cache
        uses: actions/cache@v4
        with:
          path: |
            **/build
          key: ${{ runner.os }}-build-prod-${{ github.sha }}

      - name: Mark build as successful for deploy job
        id: mark_prod_build_success
        run: echo "success=true" >> $GITHUB_OUTPUT

  deploy:
    name: Upload to S3
    runs-on: ubuntu-latest
    needs:
      - setup
      - build_prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cache from Prod
        if: ${{ needs.build_prod.outputs.status == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            **/build
          key: ${{ runner.os }}-build-prod-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-prod-

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master

        env:
          SOURCE_DIR: website/build/prod/
          AWS_S3_BUCKET: ${{ needs.build_prod.outputs.status == 'true' && secrets.AWS_S3_BUCKET_PROD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}

