name: Deploy Website

defaults:
  run:
    working-directory: website

on:
  workflow_dispatch:
  push:
    paths:
      - 'website/**'
    tags:
      - 'devbuild-*'
      - 'release-*'

env:
  NODE_VERSION: '22'

jobs:
  check_infrastructure:
    name: Check Terraform Status
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check last Terraform run status
        id: check_tf_status
        run: |
          tf_status=$(gh run list --workflow="Terraform" --branch=main --limit=1 --json conclusion | jq -r '.[0].conclusion')
          echo "status=$tf_status" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  setup:
    name: Setup Node
    runs-on: ubuntu-latest
    needs:
      - check_infrastructure

    if: ${{ needs.check_infrastructure.outputs.status == 'success' }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: cache node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: install dependencies
        run: npm ci --ignore-scripts

  website_tests:
    name: Website Tests
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: restore node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Run Tests on Website Components
        run: npm run test

  build_dev:
    name: Build Development Version
    runs-on: ubuntu-latest
    needs:
      - setup
      - website_tests
#    if: ${{ needs.website_tests.result == 'success' && startsWith(github.ref, 'refs/tags/devbuild-') }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: restore node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: 'Create env file'
        run: |
          touch .env
          echo REACT_APP_RECAPTCHA_SITE_KEY=${{ secrets.RECAPTCHA_SITE_KEY }} >> .env
          echo REACT_APP_AWS_API_ENDPOINT=${{ secrets.AWS_API_ENDPOINT }} >> .env

      - name: Build Development Version
        run: npm run build-dev

      - name: Save cache
        uses: actions/cache@v4
        with:
          path: build/dev/
          key: ${{ runner.os }}-build-dev-${{ github.sha }}

      - name: Set environment variable for build path
        run: echo "BUILD_DATA=build/dev/" >> $GITHUB_ENV

      - name: Mark build as successful for deploy job
        id: mark_dev_build_success
        run: echo "success=true" >> $GITHUB_OUTPUT

  build_prod:
    name: Build Production Version
    runs-on: ubuntu-latest
    needs:
      - setup
      - website_tests
    if: ${{ needs.website_tests.result == 'success' && startsWith(github.ref, 'refs/tags/release-') }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: restore node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Create env file
        run: |
          touch .env
          echo REACT_APP_RECAPTCHA_SITE_KEY=${{ secrets.RECAPTCHA_SITE_KEY }} >> .env
          echo REACT_APP_AWS_API_ENDPOINT=${{ secrets.AWS_API_ENDPOINT }} >> .env

      - name: Build Production Version
        run: npm run build-prod

      - name: Save cache
        uses: actions/cache@v4
        with:
          path: build/prod/
          key: ${{ runner.os }}-build-prod-${{ github.sha }}

      - name: Set environment variable for build path
        run: echo "BUILD_DATA=build/prod/" >> $GITHUB_ENV

      - name: Mark build as successful for deploy job
        id: mark_prod_build_success
        run: echo "success=true" >> $GITHUB_OUTPUT

  deploy:
    name: Upload to S3
    runs-on: ubuntu-latest
    needs:
      - setup
      - build_dev
      - build_prod

    if: ${{ needs.build_dev.outputs.success == 'true' || needs.build_prod.outputs.success == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cache
        if: ${{ needs.build_dev.outputs.success == 'true' }}
        uses: actions/cache@v3
        with:
          path: build/dev/
          key: ${{ runner.os }}-build-dev-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-dev-

      - name: Restore cache
        if: ${{ needs.build_prod.outputs.success == 'true' }}
        uses: actions/cache@v3
        with:
          path: build/prod/
          key: ${{ runner.os }}-build-prod-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-prod-

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master

        env:
          SOURCE_DIR: ${{ env.BUILD_DATA_DEV }}
          AWS_S3_BUCKET: ${{ needs.build_dev.outputs.success == 'true' && secrets.AWS_S3_BUCKET_STAGE || needs.build_prod.outputs.success == 'true' && secrets.AWS_S3_BUCKET_PROD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}

